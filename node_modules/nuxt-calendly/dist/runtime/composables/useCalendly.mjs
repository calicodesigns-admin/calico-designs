export const useCalendly = () => {
  const scriptUrl = "https://assets.calendly.com/assets/external/widget.js";
  const attemptToLoadWidgetScript = () => new Promise((resolve) => {
    try {
      if ("Calendly" in window)
        return resolve(window.Calendly);
      if (!("Calendly" in window)) {
        const script = document.createElement("script");
        script.onload = () => {
          return resolve("Calendly" in window ? window.Calendly : void 0);
        };
        script.onerror = () => {
          console.error("[nuxt-calendly] failed to load widget script.");
          return resolve(void 0);
        };
        script.setAttribute("src", scriptUrl);
        document.head.appendChild(script);
      }
    } catch (error) {
      console.error("[nuxt-calendly] attempt to load widget script failed.");
      return resolve(void 0);
    }
  });
  const getCalendly = async () => {
    if (!import.meta.client)
      return;
    const calendly = await attemptToLoadWidgetScript();
    if (!calendly)
      return;
    return calendly;
  };
  const closePopupWidget = async () => {
    const calendly = await getCalendly();
    calendly?.closePopupWidget();
  };
  const destroyBadgeWidget = async () => {
    const calendly = await getCalendly();
    calendly?.destroyBadgeWidget();
  };
  const initBadgeWidget = async (options) => {
    const calendly = await getCalendly();
    const fullOptions = {
      ...options,
      color: options.color || "#00a2ff",
      textColor: options.textColor || "#ffffff",
      branding: options.branding !== false
    };
    calendly?.initBadgeWidget(fullOptions);
  };
  const initPopupWidget = async (options) => {
    const calendly = await getCalendly();
    calendly?.initPopupWidget(options);
  };
  const initInlineWidget = async (options) => {
    const calendly = await getCalendly();
    const fullOptions = {
      ...options
    };
    calendly?.initInlineWidget(fullOptions);
  };
  const showPopupWidget = async (url) => {
    const calendly = await getCalendly();
    calendly?.showPopupWidget(url);
  };
  return {
    closePopupWidget,
    destroyBadgeWidget,
    initBadgeWidget,
    initPopupWidget,
    initInlineWidget,
    showPopupWidget
  };
};
