import { defineNuxtModule, createResolver, addComponent } from '@nuxt/kit';
import { fileURLToPath } from 'url';
import { defu } from 'defu';

const module = defineNuxtModule({
  meta: {
    name: "nuxt-calendly",
    configKey: "calendly",
    compatibility: {
      nuxt: ">=3.0.0"
    }
  },
  // Default configuration options of the Nuxt module
  defaults: {
    isEnabled: true,
    loadWidgetCSS: true,
    loadWidgetCloseIconSvg: true
  },
  setup(options, nuxt) {
    if (!options.isEnabled) {
      console.warn("[nuxt-calendly] Module is disabled (`isEnabled` = `false`) and will not be loaded.");
      return;
    }
    const resolver = createResolver(import.meta.url);
    const runtimeDir = fileURLToPath(new URL("./runtime", import.meta.url));
    addComponent({
      name: "CalendlyInlineWidget",
      filePath: resolver.resolve(runtimeDir, "components", "CalendlyInlineWidget.vue")
    });
    addComponent({
      name: "CalendlyPopupButton",
      filePath: resolver.resolve(runtimeDir, "components", "CalendlyPopupButton.vue")
    });
    addComponent({
      name: "CalendlyPopupWidget",
      filePath: resolver.resolve(runtimeDir, "components", "CalendlyPopupWidget.vue")
    });
    if (options.loadWidgetCSS) {
      nuxt.options.css.push(resolver.resolve(runtimeDir, "assets/external/widget.css"));
    }
    nuxt.hook("imports:dirs", (dirs) => {
      dirs.push(resolver.resolve(runtimeDir, "composables"));
    });
    nuxt.hook("nitro:config", (nitroConfig) => {
      nitroConfig.alias = nitroConfig.alias || {};
      nitroConfig.externals = defu(typeof nitroConfig.externals === "object" ? nitroConfig.externals : {}, {
        inline: [resolver.resolve("./runtime")]
      });
    });
    nuxt.options.build.transpile.push(runtimeDir);
  }
});

export { module as default };
